{
  "stats": {
    "suites": 6,
    "tests": 179,
    "passes": 126,
    "pending": 0,
    "failures": 53,
    "start": "2024-03-13T22:11:37.811Z",
    "end": "2024-03-13T22:11:38.540Z",
    "duration": 729,
    "testsRegistered": 179,
    "passPercent": 70.39106145251397,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9a956561-7d64-4550-b4bf-74c3d9901c06",
      "title": "",
      "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
      "file": "\\test\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d9412792-2c69-4698-92e6-1fd69ee7831b",
          "title": "Calculator Test",
          "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
          "file": "\\test\\test.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Calculator Test\"",
              "fullTitle": "Calculator Test \"before each\" hook in \"Calculator Test\"",
              "timedOut": null,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "calculator = new Calculator();",
              "err": {},
              "uuid": "cef5fbdc-2f1a-420f-9ad1-5775ece64ba0",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a3a930c9-d700-44b6-9fd8-fe66edf91e32",
              "title": "#add()",
              "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
              "file": "\\test\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add two positive integer numbers correctly, 1 + 3 = 4",
                  "fullTitle": "Calculator Test #add() Should add two positive integer numbers correctly, 1 + 3 = 4",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(1, 3)).to.equal(4);",
                  "err": {},
                  "uuid": "53cb0bdf-6c8d-42c6-9f36-40e4ae67f0c0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should add two negative integer numbers correctly, (-5) + (-8) = -13",
                  "fullTitle": "Calculator Test #add() Should add two negative integer numbers correctly, (-5) + (-8) = -13",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(-5, -8)).to.equal(-13);",
                  "err": {},
                  "uuid": "5160160e-d2f6-445a-9c91-c12bca39f640",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should add positive and negative integer numbers correctly, 11 + (-6) = 5",
                  "fullTitle": "Calculator Test #add() Should add positive and negative integer numbers correctly, 11 + (-6) = 5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(11, -6)).to.equal(5);",
                  "err": {},
                  "uuid": "70701015-1cbd-418a-ad92-042d9ecf5318",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 1 and 123.456 equals 124.456",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 1 and 123.456 equals 124.456",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "0e6aeacf-8998-408a-a8af-c9a096fd2096",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 1 and -123.456 equals -122.456",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 1 and -123.456 equals -122.456",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "982f2635-5e3c-4d3a-938b-c4e2c2eaa98b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 9.9999 and 10 equals 19.9999",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 9.9999 and 10 equals 19.9999",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "01ac7c34-f9a7-4a58-90fb-a43dfe1b3da7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers -9.9999 and 10 equals 0.0001",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers -9.9999 and 10 equals 0.0001",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "af9ce87c-4381-452d-806a-dec7f94c348a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 0.565 and 3.42 equals 3.985",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 0.565 and 3.42 equals 3.985",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "de81700a-aa89-40f4-b60c-73bb479bc993",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers -0.565 and -3.42 equals -3.985",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers -0.565 and -3.42 equals -3.985",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "f5d0d232-f15c-4fd8-af88-1251640793a3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers -0.565 and 3.42 equals 2.855",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers -0.565 and 3.42 equals 2.855",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "69e20ef3-c52d-480c-88a7-6cb49fa4a257",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 0.565 and -3.42 equals -2.855",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 0.565 and -3.42 equals -2.855",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "1ccdfa1a-5a56-45e3-9353-12125d3080c6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 5e-324 and 1 equals 1",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 5e-324 and 1 equals 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "a1fc0bae-5869-4fe5-8b63-09ee07c470fe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding fractional numbers 5e-324 and -1 equals -1",
                  "fullTitle": "Calculator Test #add() Should result adding fractional numbers 5e-324 and -1 equals -1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "4c7d3371-ac76-4265-b89a-c160b0abd172",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 0 and 856 equals 856",
                  "fullTitle": "Calculator Test #add() Should result adding 0 and 856 equals 856",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "75cea4f3-9888-4381-96b5-ed7c5c09badb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding -4321 and 0 equals -4321",
                  "fullTitle": "Calculator Test #add() Should result adding -4321 and 0 equals -4321",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "ccc51907-e371-4fb1-a744-40bd55644a27",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 3.5 and 0 equals 3.5",
                  "fullTitle": "Calculator Test #add() Should result adding 3.5 and 0 equals 3.5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "360ae089-e760-4107-9acb-17af92736789",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 0 and -2.25 equals -2.25",
                  "fullTitle": "Calculator Test #add() Should result adding 0 and -2.25 equals -2.25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "010bdec0-f645-47fe-95ca-ebb673425731",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 0 and 0 equals 0",
                  "fullTitle": "Calculator Test #add() Should result adding 0 and 0 equals 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "c6aec6ee-14e8-4486-bd0d-38ddb454ae6c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 5e-324 and 0 equals 5e-324",
                  "fullTitle": "Calculator Test #add() Should result adding 5e-324 and 0 equals 5e-324",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "53cca7f6-0632-487d-88d5-f7d49d3cbd3d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 1.7976931348623157e+308 and 0 equals 1.7976931348623157e+308",
                  "fullTitle": "Calculator Test #add() Should result adding 1.7976931348623157e+308 and 0 equals 1.7976931348623157e+308",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "01a8b386-e406-4bc8-8cdf-6314b1442f36",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding -9007199254740991 and 0 equals -9007199254740991",
                  "fullTitle": "Calculator Test #add() Should result adding -9007199254740991 and 0 equals -9007199254740991",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "59e0379d-6d71-46e7-813c-b13fcae72d0e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result adding 9007199254740991 and 0 equals 9007199254740991",
                  "fullTitle": "Calculator Test #add() Should result adding 9007199254740991 and 0 equals 9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "01c838fa-5996-4e23-a78e-5748716d30ae",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should add big numbers correctly",
                  "fullTitle": "Calculator Test #add() Should add big numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(9007199254740992, 9007199254740992)).to.equal(18014398509481984);",
                  "err": {},
                  "uuid": "ccddd034-e664-4d59-abcc-e7811da8ac14",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should add several numbers correctly",
                  "fullTitle": "Calculator Test #add() Should add several numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(5, 18, -3, 1.555, -1, 600, 0)).to.equal(620.555);",
                  "err": {},
                  "uuid": "7cdad9ee-d40b-4781-9226-9f9eef05e476",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result 0 if no numbers are added",
                  "fullTitle": "Calculator Test #add() Should result 0 if no numbers are added",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add()).to.equal(0);",
                  "err": {},
                  "uuid": "8790c39b-4b41-4d99-8128-7f8d1cdb3458",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle adding numbers near the minimum value",
                  "fullTitle": "Calculator Test #add() Should correctly handle adding numbers near the minimum value",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(Number.MIN_SAFE_INTEGER, 1)).to.equal(Number.MIN_SAFE_INTEGER + 1);",
                  "err": {},
                  "uuid": "92142e92-a6a4-405a-80f6-b70046597f31",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle adding numbers near the maximum value",
                  "fullTitle": "Calculator Test #add() Should correctly handle adding numbers near the maximum value",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.add(Number.MAX_SAFE_INTEGER, -1)).to.equal(Number.MAX_SAFE_INTEGER - 1);",
                  "err": {},
                  "uuid": "0a2d0a4e-6eaf-4dd8-a4d8-f1fabbbf59df",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "3674b070-5db8-423b-911e-a3b79e0bc73b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "cdd5ca1a-3cd5-40b3-994c-91a77152113d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, a and 3.5 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, a and 3.5 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "29723a3f-f80d-4467-bc76-a596ee97c9a7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, true and 18 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, true and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "335cf7ba-35c6-419a-8d01-0a620fe878bb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, null and 18 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, null and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "dd2e4b8d-5a9d-4bf5-b476-ac2b5b2f7dc5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, undefined and 18 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, undefined and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "19d4b58c-cd58-432c-b787-fe3c8fb89b94",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add, 18 and [object Object] equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add, 18 and [object Object] equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "c71d542d-83fc-4927-b64d-cb4eb06ae688",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for add,  and 18 equals TypeError",
                  "fullTitle": "Calculator Test #add() Should result an Error if non-number arguments are provided for add,  and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.add(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:103:62)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "f3ccfd7e-b3d7-4ed7-8a76-5c9bf7d8e50f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53cb0bdf-6c8d-42c6-9f36-40e4ae67f0c0",
                "5160160e-d2f6-445a-9c91-c12bca39f640",
                "70701015-1cbd-418a-ad92-042d9ecf5318",
                "0e6aeacf-8998-408a-a8af-c9a096fd2096",
                "982f2635-5e3c-4d3a-938b-c4e2c2eaa98b",
                "01ac7c34-f9a7-4a58-90fb-a43dfe1b3da7",
                "af9ce87c-4381-452d-806a-dec7f94c348a",
                "de81700a-aa89-40f4-b60c-73bb479bc993",
                "f5d0d232-f15c-4fd8-af88-1251640793a3",
                "69e20ef3-c52d-480c-88a7-6cb49fa4a257",
                "1ccdfa1a-5a56-45e3-9353-12125d3080c6",
                "a1fc0bae-5869-4fe5-8b63-09ee07c470fe",
                "4c7d3371-ac76-4265-b89a-c160b0abd172",
                "75cea4f3-9888-4381-96b5-ed7c5c09badb",
                "ccc51907-e371-4fb1-a744-40bd55644a27",
                "360ae089-e760-4107-9acb-17af92736789",
                "010bdec0-f645-47fe-95ca-ebb673425731",
                "c6aec6ee-14e8-4486-bd0d-38ddb454ae6c",
                "53cca7f6-0632-487d-88d5-f7d49d3cbd3d",
                "01a8b386-e406-4bc8-8cdf-6314b1442f36",
                "59e0379d-6d71-46e7-813c-b13fcae72d0e",
                "01c838fa-5996-4e23-a78e-5748716d30ae",
                "ccddd034-e664-4d59-abcc-e7811da8ac14",
                "7cdad9ee-d40b-4781-9226-9f9eef05e476",
                "8790c39b-4b41-4d99-8128-7f8d1cdb3458",
                "92142e92-a6a4-405a-80f6-b70046597f31",
                "0a2d0a4e-6eaf-4dd8-a4d8-f1fabbbf59df"
              ],
              "failures": [
                "3674b070-5db8-423b-911e-a3b79e0bc73b",
                "cdd5ca1a-3cd5-40b3-994c-91a77152113d",
                "29723a3f-f80d-4467-bc76-a596ee97c9a7",
                "335cf7ba-35c6-419a-8d01-0a620fe878bb",
                "dd2e4b8d-5a9d-4bf5-b476-ac2b5b2f7dc5",
                "19d4b58c-cd58-432c-b787-fe3c8fb89b94",
                "c71d542d-83fc-4927-b64d-cb4eb06ae688",
                "f3ccfd7e-b3d7-4ed7-8a76-5c9bf7d8e50f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "3117bdee-7899-4747-baec-3d2de228c142",
              "title": "#multiply()",
              "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
              "file": "\\test\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should multiply two positive numbers correctly",
                  "fullTitle": "Calculator Test #multiply() Should multiply two positive numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(5, 4)).to.equal(20);",
                  "err": {},
                  "uuid": "6707563f-dab0-46b3-90f3-eadce278291b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should multiply two negative numbers correctly",
                  "fullTitle": "Calculator Test #multiply() Should multiply two negative numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(-5, -4)).to.equal(20);",
                  "err": {},
                  "uuid": "d0c6a5c4-b79c-4131-8120-bf3d28a2dc68",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should multiply negative & positive numbers correctly",
                  "fullTitle": "Calculator Test #multiply() Should multiply negative & positive numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(-2, 8)).to.equal(-16);",
                  "err": {},
                  "uuid": "443e80c7-3b53-40c5-b563-3209b4f0880f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result 0 if no numbers are multiplied",
                  "fullTitle": "Calculator Test #multiply() Should result 0 if no numbers are multiplied",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply()).to.equal(0); //тест падает, это баг, отсутствует обработчик для вывода корректного результата",
                  "err": {
                    "message": "AssertionError: expected 1 to equal +0",
                    "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:122:40)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- 1\n+ 0\n"
                  },
                  "uuid": "f0d587e6-12f5-4114-9e21-07e9aae4833a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 0.565 and 3.42 equals 1.9323",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 0.565 and 3.42 equals 1.9323",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "5341701f-81be-494a-b084-42c7a833d2d2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers -0.565 and -3.42 equals 1.9323",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers -0.565 and -3.42 equals 1.9323",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "61cfeed0-2f4b-43f5-81c1-4af1898f956a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers -0.01 and 3.33 equals -0.0333",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers -0.01 and 3.33 equals -0.0333",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "08722abf-8fa5-451d-a200-8ee89de3f892",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 0.565 and -3.42 equals -1.9323",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 0.565 and -3.42 equals -1.9323",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "c9ea6c88-f8a0-40ef-ad69-c9d0c36414c7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 5.123 and 2 equals 10.246",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 5.123 and 2 equals 10.246",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "30e04d55-81aa-400a-8534-ebe6f4b71852",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 5.123 and -2 equals -10.246",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 5.123 and -2 equals -10.246",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "981452b1-c244-43f7-95e7-ee71d400fe8d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 5e-324 and 2 equals 1e-323",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 5e-324 and 2 equals 1e-323",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "918dc711-74f0-41ce-abcc-3fbfe504e6cb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result multiply with fractional numbers 5e-324 and -2 equals -1e-323",
                  "fullTitle": "Calculator Test #multiply() Should result multiply with fractional numbers 5e-324 and -2 equals -1e-323",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "1e7f6369-7a44-436b-ae6a-20805e5fe557",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly multiply two minimum safe integers",
                  "fullTitle": "Calculator Test #multiply() Should correctly multiply two minimum safe integers",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER)).to.equal(\n  Number.MIN_SAFE_INTEGER * Number.MIN_SAFE_INTEGER\n);",
                  "err": {},
                  "uuid": "0600de66-bd84-4a5e-a37f-ee54c5f7c509",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly multiply two maximum safe integers",
                  "fullTitle": "Calculator Test #multiply() Should correctly multiply two maximum safe integers",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER)).to.equal(\n  Number.MAX_SAFE_INTEGER * Number.MAX_SAFE_INTEGER\n);",
                  "err": {},
                  "uuid": "efef6f3b-e53e-41d4-bc51-68736014e146",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 2 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 2 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "e36fecdb-f0aa-49b1-b2b5-430b20f21c45",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 0 multiply to 6846153168416",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 0 multiply to 6846153168416",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "37b122ad-9ed3-4c2d-89f9-7986903b4f34",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if -18 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if -18 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "d3a566c9-726e-448f-9040-cab189116c30",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 0 multiply to 3.5",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 0 multiply to 3.5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "357fa3cf-a71d-4cd7-80fa-6ab65b14cc96",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 5e-324 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 5e-324 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "26b37718-01e7-4fb1-8355-e7ac0913ed1a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 1.7976931348623157e+308 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 1.7976931348623157e+308 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "6eba1a3d-124f-4fe9-8836-87567ec619f1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if -9007199254740991 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if -9007199254740991 multiply to 0",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "6fca61c2-8145-418e-9606-b5f620796c08",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 9007199254740991 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 9007199254740991 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "b52f3252-0531-4630-ba42-913436af6fa2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if 12345678901234568 multiply to 0",
                  "fullTitle": "Calculator Test #multiply() Should return 0 if 12345678901234568 multiply to 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input.input)).to.equal(0);",
                  "err": {},
                  "uuid": "d0792c3d-3400-43a7-bdb1-592bcff329b0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 2 * 1 = 2",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 2 * 1 = 2",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "ef6edb54-526b-4faa-b492-ea10976ff741",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 1 * 6846153168416 = 6846153168416",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 1 * 6846153168416 = 6846153168416",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "72ebd830-6635-4146-a7cf-66ef66c789d2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, -18 * 1 = -18",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, -18 * 1 = -18",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "7d50a38c-c29d-4574-810a-c8dc6a6d9b82",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 1 * -3.5 = -3.5",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 1 * -3.5 = -3.5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "4adbf4a8-bb6b-4fad-9ff1-c114c49c70ca",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 5e-324 * 1 = 5e-324",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 5e-324 * 1 = 5e-324",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "efd17a38-d90c-4ebb-8c36-db83c70fef6d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 1.7976931348623157e+308 * 1 = 1.7976931348623157e+308",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 1.7976931348623157e+308 * 1 = 1.7976931348623157e+308",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "6120f130-c6e0-410e-8be1-60f6c932a0ff",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, -9007199254740991 * 1 = -9007199254740991",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, -9007199254740991 * 1 = -9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "fe5206c5-62ab-411f-bd77-36bd7e371ff1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 9007199254740991 * 1 = 9007199254740991",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 9007199254740991 * 1 = 9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "4577dcf4-adeb-4593-a2ae-c91b765df66d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it multiply to 1, 12345678901234568 * 1 = 12345678901234568",
                  "fullTitle": "Calculator Test #multiply() Should return the same number if it multiply to 1, 12345678901234568 * 1 = 12345678901234568",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "3876cfeb-8038-4102-bebb-baeff344c1fc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly multiply several numbers",
                  "fullTitle": "Calculator Test #multiply() Should correctly multiply several numbers",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.multiply(1, 5.5, 0.000001, 99999)).to.be.closeTo(0.5499945, 0.0000001);\nexpect(calculator.multiply(-15, 18.5528746, 0, 55463169)).to.equal(0);",
                  "err": {},
                  "uuid": "909eb264-3ade-4719-a9e5-d9ea0e360758",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "cf76a8da-2762-434f-b8e7-b855b376f60a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "c63b7b45-af15-48e2-be01-35d07e9d7219",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, a and 3.5 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, a and 3.5 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e9d046a9-b603-4375-8798-43f2a1a331c7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, true and 18 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, true and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "06a99d40-6e4f-4f40-85dd-992ff084c922",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, null and 18 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, null and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "6144a551-5136-4ee9-a5ab-a18d1048aed1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, undefined and 18 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, undefined and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "4ae3fbb5-d16f-493f-a16f-98637ef79de1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply, 18 and [object Object] equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply, 18 and [object Object] equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e6b695a6-bd99-45b4-812b-a787b56171ce",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for multiply,  and 18 equals TypeError",
                  "fullTitle": "Calculator Test #multiply() Should result an Error if non-number arguments are provided for multiply,  and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.multiply(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:199:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "73cb0f9a-0654-412d-841f-adedbfe03621",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6707563f-dab0-46b3-90f3-eadce278291b",
                "d0c6a5c4-b79c-4131-8120-bf3d28a2dc68",
                "443e80c7-3b53-40c5-b563-3209b4f0880f",
                "5341701f-81be-494a-b084-42c7a833d2d2",
                "61cfeed0-2f4b-43f5-81c1-4af1898f956a",
                "08722abf-8fa5-451d-a200-8ee89de3f892",
                "c9ea6c88-f8a0-40ef-ad69-c9d0c36414c7",
                "30e04d55-81aa-400a-8534-ebe6f4b71852",
                "981452b1-c244-43f7-95e7-ee71d400fe8d",
                "918dc711-74f0-41ce-abcc-3fbfe504e6cb",
                "1e7f6369-7a44-436b-ae6a-20805e5fe557",
                "0600de66-bd84-4a5e-a37f-ee54c5f7c509",
                "efef6f3b-e53e-41d4-bc51-68736014e146",
                "e36fecdb-f0aa-49b1-b2b5-430b20f21c45",
                "37b122ad-9ed3-4c2d-89f9-7986903b4f34",
                "d3a566c9-726e-448f-9040-cab189116c30",
                "357fa3cf-a71d-4cd7-80fa-6ab65b14cc96",
                "26b37718-01e7-4fb1-8355-e7ac0913ed1a",
                "6eba1a3d-124f-4fe9-8836-87567ec619f1",
                "6fca61c2-8145-418e-9606-b5f620796c08",
                "b52f3252-0531-4630-ba42-913436af6fa2",
                "d0792c3d-3400-43a7-bdb1-592bcff329b0",
                "ef6edb54-526b-4faa-b492-ea10976ff741",
                "72ebd830-6635-4146-a7cf-66ef66c789d2",
                "7d50a38c-c29d-4574-810a-c8dc6a6d9b82",
                "4adbf4a8-bb6b-4fad-9ff1-c114c49c70ca",
                "efd17a38-d90c-4ebb-8c36-db83c70fef6d",
                "6120f130-c6e0-410e-8be1-60f6c932a0ff",
                "fe5206c5-62ab-411f-bd77-36bd7e371ff1",
                "4577dcf4-adeb-4593-a2ae-c91b765df66d",
                "3876cfeb-8038-4102-bebb-baeff344c1fc",
                "909eb264-3ade-4719-a9e5-d9ea0e360758"
              ],
              "failures": [
                "f0d587e6-12f5-4114-9e21-07e9aae4833a",
                "cf76a8da-2762-434f-b8e7-b855b376f60a",
                "c63b7b45-af15-48e2-be01-35d07e9d7219",
                "e9d046a9-b603-4375-8798-43f2a1a331c7",
                "06a99d40-6e4f-4f40-85dd-992ff084c922",
                "6144a551-5136-4ee9-a5ab-a18d1048aed1",
                "4ae3fbb5-d16f-493f-a16f-98637ef79de1",
                "e6b695a6-bd99-45b4-812b-a787b56171ce",
                "73cb0f9a-0654-412d-841f-adedbfe03621"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "49cdc389-928b-4e82-b19e-4fe30b2e78d5",
              "title": "#subtraction()",
              "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
              "file": "\\test\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return 2 when subtracts 5 minus 3",
                  "fullTitle": "Calculator Test #subtraction() Should return 2 when subtracts 5 minus 3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "c2a2644f-1a9a-4091-8f8d-6c1616fcb08e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return -2 when subtracts 3 minus 5",
                  "fullTitle": "Calculator Test #subtraction() Should return -2 when subtracts 3 minus 5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "806db9f4-375f-40b9-acb8-0c02c330706c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return -8 when subtracts -5 minus 3",
                  "fullTitle": "Calculator Test #subtraction() Should return -8 when subtracts -5 minus 3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "2d5125af-5296-4956-9d46-fa7b031a4c97",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 8 when subtracts 5 minus -3",
                  "fullTitle": "Calculator Test #subtraction() Should return 8 when subtracts 5 minus -3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "7cb7db48-efd6-47f4-a6b0-e1eba6369cb2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return -2 when subtracts -5 minus -3",
                  "fullTitle": "Calculator Test #subtraction() Should return -2 when subtracts -5 minus -3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "471115f4-0069-4d22-a4ba-51bb8cb5ffde",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 if no any numbers are substracted",
                  "fullTitle": "Calculator Test #subtraction() Should return 0 if no any numbers are substracted",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction()).to.equal(0); //возвращает NaN, в коде нет конвертора в 0 для вывода понятного юзеру результата",
                  "err": {
                    "message": "AssertionError: expected NaN to equal +0",
                    "estack": "AssertionError: expected NaN to equal +0\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:220:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- NaN\n+ 0\n"
                  },
                  "uuid": "96ddb114-1628-4904-9051-ca10f676e5d7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 0 - 856 equals -856",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 0 - 856 equals -856",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "53805de5-6ce3-41ac-95e5-fb18fdbaa064",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction -4321 - 0 equals -4321",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction -4321 - 0 equals -4321",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "8b6c391a-3206-4c08-9a63-26cc9a8b74ab",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 3.5 - 0 equals 3.5",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 3.5 - 0 equals 3.5",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "503d91cf-ca18-417e-b153-8b4b69bb2dc8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 0 - -2.25 equals 2.25",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 0 - -2.25 equals 2.25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "ee853880-7d60-4d3d-84b1-73c55a639a8c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 0 - 0 equals 0",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 0 - 0 equals 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "29fdee52-0529-4654-8977-d804a3c4d488",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 5e-324 - 0 equals 5e-324",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 5e-324 - 0 equals 5e-324",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "a2b3faab-0720-4b2a-80b6-cda6b2a0ffe1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 1.7976931348623157e+308 - 0 equals 1.7976931348623157e+308",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 1.7976931348623157e+308 - 0 equals 1.7976931348623157e+308",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "968271b6-d81d-419f-9b71-dff6d438bfb0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction -9007199254740991 - 0 equals -9007199254740991",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction -9007199254740991 - 0 equals -9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "03da9e0f-a5b3-4883-a78a-a6c0818a2922",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 9007199254740991 - 0 equals 9007199254740991",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 9007199254740991 - 0 equals 9007199254740991",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "28e5aaf7-00b2-41ac-9afb-a34ee8a62299",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction 12345678901234568 - 0 equals 12345678901234568",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction 12345678901234568 - 0 equals 12345678901234568",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "98fcc495-cd33-4ae7-85c6-289f1f43d3c0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 1 -  123.456 equals -122.456",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 1 -  123.456 equals -122.456",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "5fa056ad-fa78-4da2-bbce-bf61d3765e81",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 1 -  -123.456 equals 124.456",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 1 -  -123.456 equals 124.456",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "b1775125-f086-4a06-bdc9-3ef18a29919b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 9.9999 -  10 equals -0.0001",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 9.9999 -  10 equals -0.0001",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "db1b7ef7-439e-41fb-a2a1-a653125edb90",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers -9.9999 -  10 equals -19.9999",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers -9.9999 -  10 equals -19.9999",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "f40635f3-50ae-4590-ad6d-7e16c8381b93",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 0.565 -  3.42 equals -2.855",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 0.565 -  3.42 equals -2.855",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "13a9f444-5c9e-40f7-879f-cdeae77f4871",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers -0.565 -  -3.42 equals 2.855",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers -0.565 -  -3.42 equals 2.855",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "281d03c1-2e7c-41fa-8076-4ab0c75986e5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers -0.565 -  3.42 equals -3.985",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers -0.565 -  3.42 equals -3.985",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "c221bea1-7990-4d07-87ee-a4de8f3a2ad2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 0.565 -  -3.42 equals 3.985",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 0.565 -  -3.42 equals 3.985",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "c008ee32-2e8a-41b1-b4af-6b9cf421eb96",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 5e-324 -  1 equals -1",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 5e-324 -  1 equals -1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "0b99742c-a78a-4ca6-a721-e9bf355faaf0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction fractional numbers 5e-324 -  -1 equals 1",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction fractional numbers 5e-324 -  -1 equals 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(...input)).to.be.closeTo(expected, 0.0001);",
                  "err": {},
                  "uuid": "48d61bf5-2458-48cb-9797-059565adf6c4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result subtraction of several numbers correctly",
                  "fullTitle": "Calculator Test #subtraction() Should result subtraction of several numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(5, 18, -3, 1.555, -1, 600, 0)).to.equal(-610.555); //тест падает, баг, метод может прінімать только 2 аргумента, не может последовательно вычітать чісла",
                  "err": {
                    "message": "AssertionError: expected -13 to equal -610.555",
                    "estack": "AssertionError: expected -13 to equal -610.555\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:262:71)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- -13\n+ -610.555\n"
                  },
                  "uuid": "ea965ce6-d187-416a-92a0-9619dc31a993",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle subtraction numbers near the minimum value",
                  "fullTitle": "Calculator Test #subtraction() Should correctly handle subtraction numbers near the minimum value",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(Number.MIN_SAFE_INTEGER, -1)).to.equal(Number.MIN_SAFE_INTEGER + 1);",
                  "err": {},
                  "uuid": "a42bdab0-a700-417e-b41a-f23e67608569",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle subtraction numbers near the maximum value",
                  "fullTitle": "Calculator Test #subtraction() Should correctly handle subtraction numbers near the maximum value",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.subtraction(Number.MAX_SAFE_INTEGER, 1)).to.equal(Number.MAX_SAFE_INTEGER - 1);",
                  "err": {},
                  "uuid": "e7dd9417-0010-4c23-bb11-f71bd63784aa",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "db1c0afa-7d1b-4a76-b001-b72def4b72e9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, 2 and 3 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, 2 and 3 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "4cde5775-dff0-4800-ad42-40a5068a6916",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, a and 3.5 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, a and 3.5 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "6c9baeea-f71a-4bdf-a642-64113353dab0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, true and 18 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, true and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "af728289-9123-4a80-b7c0-dff32c010812",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, null and 18 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, null and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "876a1379-9ede-403f-9e32-a373f8520de7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, undefined and 18 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, undefined and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "9fc759b8-c819-4e18-99fd-524f6845b7b0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction, 18 and [object Object] equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction, 18 and [object Object] equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "5c289966-3e6f-4f96-8e89-fe8fa031a3b6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for substraction,  and 18 equals TypeError",
                  "fullTitle": "Calculator Test #subtraction() Should result an Error if non-number arguments are provided for substraction,  and 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.subtraction(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:277:70)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "fa1dea86-e502-4ae2-9592-27a3a37607de",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2a2644f-1a9a-4091-8f8d-6c1616fcb08e",
                "806db9f4-375f-40b9-acb8-0c02c330706c",
                "2d5125af-5296-4956-9d46-fa7b031a4c97",
                "7cb7db48-efd6-47f4-a6b0-e1eba6369cb2",
                "471115f4-0069-4d22-a4ba-51bb8cb5ffde",
                "53805de5-6ce3-41ac-95e5-fb18fdbaa064",
                "8b6c391a-3206-4c08-9a63-26cc9a8b74ab",
                "503d91cf-ca18-417e-b153-8b4b69bb2dc8",
                "ee853880-7d60-4d3d-84b1-73c55a639a8c",
                "29fdee52-0529-4654-8977-d804a3c4d488",
                "a2b3faab-0720-4b2a-80b6-cda6b2a0ffe1",
                "968271b6-d81d-419f-9b71-dff6d438bfb0",
                "03da9e0f-a5b3-4883-a78a-a6c0818a2922",
                "28e5aaf7-00b2-41ac-9afb-a34ee8a62299",
                "98fcc495-cd33-4ae7-85c6-289f1f43d3c0",
                "5fa056ad-fa78-4da2-bbce-bf61d3765e81",
                "b1775125-f086-4a06-bdc9-3ef18a29919b",
                "db1b7ef7-439e-41fb-a2a1-a653125edb90",
                "f40635f3-50ae-4590-ad6d-7e16c8381b93",
                "13a9f444-5c9e-40f7-879f-cdeae77f4871",
                "281d03c1-2e7c-41fa-8076-4ab0c75986e5",
                "c221bea1-7990-4d07-87ee-a4de8f3a2ad2",
                "c008ee32-2e8a-41b1-b4af-6b9cf421eb96",
                "0b99742c-a78a-4ca6-a721-e9bf355faaf0",
                "48d61bf5-2458-48cb-9797-059565adf6c4",
                "a42bdab0-a700-417e-b41a-f23e67608569",
                "e7dd9417-0010-4c23-bb11-f71bd63784aa"
              ],
              "failures": [
                "96ddb114-1628-4904-9051-ca10f676e5d7",
                "ea965ce6-d187-416a-92a0-9619dc31a993",
                "db1c0afa-7d1b-4a76-b001-b72def4b72e9",
                "4cde5775-dff0-4800-ad42-40a5068a6916",
                "6c9baeea-f71a-4bdf-a642-64113353dab0",
                "af728289-9123-4a80-b7c0-dff32c010812",
                "876a1379-9ede-403f-9e32-a373f8520de7",
                "9fc759b8-c819-4e18-99fd-524f6845b7b0",
                "5c289966-3e6f-4f96-8e89-fe8fa031a3b6",
                "fa1dea86-e502-4ae2-9592-27a3a37607de"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "3e028fac-bd27-4d70-9444-e41ad4958d5a",
              "title": "#divide()",
              "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
              "file": "\\test\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should result exact division of integer numbers: 18 / 6 equals 3",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: 18 / 6 equals 3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "ea3209a8-83d1-44f9-ae42-421ba18d96d8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result exact division of integer numbers: 18 / -6 equals -3",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: 18 / -6 equals -3",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "91f3600d-1130-4f17-89b4-bb050d8ceca2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result exact division of integer numbers: -18 / 6 equals -3",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: -18 / 6 equals -3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "fab7d725-0aa1-43fe-93dc-4f3a75e602b3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result exact division of integer numbers: -18 / -6 equals 3",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: -18 / -6 equals 3",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "6396f7f6-281a-4651-87c5-0dbbfea4f80f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result exact division of integer numbers: -9007199254740991 / 2 equals -4503599627370495.5",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: -9007199254740991 / 2 equals -4503599627370495.5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "72839f91-5641-423b-abbb-6fab726f509b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result exact division of integer numbers: 9007199254740991 / -2 equals -4503599627370495.5",
                  "fullTitle": "Calculator Test #divide() Should result exact division of integer numbers: 9007199254740991 / -2 equals -4503599627370495.5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.equal(expected);",
                  "err": {},
                  "uuid": "f1fe2155-271b-41f8-8d84-30d9536a59f8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result devision with a reminder of integer numbers 18 / 8 equals 2.25",
                  "fullTitle": "Calculator Test #divide() Should result devision with a reminder of integer numbers 18 / 8 equals 2.25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.01);",
                  "err": {},
                  "uuid": "93292096-31a7-4333-b9d9-e150419b3811",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result devision with a reminder of integer numbers 18 / -8 equals -2.25",
                  "fullTitle": "Calculator Test #divide() Should result devision with a reminder of integer numbers 18 / -8 equals -2.25",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.01);",
                  "err": {},
                  "uuid": "7d1c8a12-4163-4139-acbe-2d1ca5378286",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result devision with a reminder of integer numbers -18 / 8 equals -2.25",
                  "fullTitle": "Calculator Test #divide() Should result devision with a reminder of integer numbers -18 / 8 equals -2.25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.01);",
                  "err": {},
                  "uuid": "9981e064-65d8-4d7d-9488-7e6654e5379e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result devision with a reminder of integer numbers -18 / -8 equals 2.25",
                  "fullTitle": "Calculator Test #divide() Should result devision with a reminder of integer numbers -18 / -8 equals 2.25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.01);",
                  "err": {},
                  "uuid": "f4cb98ec-8762-48bf-8841-3128de80d26e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  5 / 1 equals 5",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  5 / 1 equals 5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "76b72378-0cc4-4fd8-a678-b1ad99165498",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  -5 / 1 equals -5",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  -5 / 1 equals -5",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "dd87c7c4-871a-43be-a9a7-3657f7ea9499",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  0.00001 / 1 equals 0.00001",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  0.00001 / 1 equals 0.00001",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "83d8c1d3-8493-46e4-8928-f692f6a4abf9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  -0.00001 / -1 equals 0.00001",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  -0.00001 / -1 equals 0.00001",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "de01636a-c347-4254-beeb-ccd3dcc865fd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  -9007199254740991 / 1 equals -9007199254740991",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  -9007199254740991 / 1 equals -9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "139cef55-a8f4-4810-a734-6723872aa672",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  9007199254740991 / 1 equals 9007199254740991",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  9007199254740991 / 1 equals 9007199254740991",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "20d41ec1-6dff-432a-b4d1-526dd3d710bc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  5e-324 / 1 equals 5e-324",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  5e-324 / 1 equals 5e-324",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "7640da5e-5cfc-4a4c-919c-7784276f0091",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  1.7976931348623157e+308 / 1 equals 1.7976931348623157e+308",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  1.7976931348623157e+308 / 1 equals 1.7976931348623157e+308",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "7105a571-5275-462e-816a-b45da67956ad",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the same number if it divides by 1:  12345678901234568 / 1 equals 12345678901234568",
                  "fullTitle": "Calculator Test #divide() Should return the same number if it divides by 1:  12345678901234568 / 1 equals 12345678901234568",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "32990ac0-6276-42be-a911-439ac560bdb6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  5 / 5 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  5 / 5 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "a53fa9b1-ee53-49e5-bb6c-543497000ee0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  -5 / -5 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  -5 / -5 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "ab887ce3-616a-44ea-aebc-e4608ee3c043",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  0.00001 / 0.00001 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  0.00001 / 0.00001 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "5093bd97-874c-47d5-9c89-512d42cd329c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  -0.00001 / -0.00001 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  -0.00001 / -0.00001 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "b072f4f8-fac5-41a7-b638-1e18c7b260fa",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  -9007199254740991 / -9007199254740991 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  -9007199254740991 / -9007199254740991 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "1270680e-0746-4814-bbd8-37d122fc7b6d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  9007199254740991 / 9007199254740991 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  9007199254740991 / 9007199254740991 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "ed6fe22c-4898-4cff-b815-30774779e056",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  5e-324 / 5e-324 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  5e-324 / 5e-324 = 1",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "c0846f7d-f722-4be3-8431-c67c8604d7df",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  1.7976931348623157e+308 / 1.7976931348623157e+308 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  1.7976931348623157e+308 / 1.7976931348623157e+308 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "10046e61-3623-44d7-92cc-2c42f3c54524",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 if number divides by itself:  12345678901234568 / 12345678901234568 = 1",
                  "fullTitle": "Calculator Test #divide() Should return 1 if number divides by itself:  12345678901234568 / 12345678901234568 = 1",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.equal(1);",
                  "err": {},
                  "uuid": "93b075e6-35b8-49e5-85e5-1b233e5dd194",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e52b52e9-0080-4d9a-88ff-2daf8e185c75",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e4874917-1ba1-43fa-af74-d1d707a6f1db",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "ce84c03c-1383-4b67-b659-a182c49b5136",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "5d058bd6-396c-47cc-befe-90e2dd3ff6df",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "47529524-fa74-42bb-a5f2-979624ad8e78",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "f64fb2fd-d3e1-47b6-ab93-653a73f3e7e7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should correctly handle division by zero providing an Error",
                  "fullTitle": "Calculator Test #divide() Should correctly handle division by zero providing an Error",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "TypeError: input.input is not iterable (cannot read property undefined)",
                    "estack": "TypeError: input.input is not iterable (cannot read property undefined)\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:359:27)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "88d38f74-d2d9-4b08-8662-80953dd524c1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should divide several numbers correctly",
                  "fullTitle": "Calculator Test #divide() Should divide several numbers correctly",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.divide(1000, 1, 2.5, 0.000001, 80000)).to.equal(5000); //тест падает, баг, метод может выполнять корректное деление только с 2мя аргументами, не может последовательно делить несколько чисел",
                  "err": {
                    "message": "AssertionError: expected 1000 to equal 5000",
                    "estack": "AssertionError: expected 1000 to equal 5000\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:364:67)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": "- 1000\n+ 5000\n"
                  },
                  "uuid": "3cb210b0-5b28-4419-94f5-4db2f00c657a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, 2 / 3 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, 2 / 3 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "4db31071-d5fe-4c12-ad60-29cd5830ff36",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, 2 / 3 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, 2 / 3 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "da36085f-5e55-40cf-8137-8451594a2266",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, a / 3.5 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, a / 3.5 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "2a9a5f32-0667-47b9-bac5-65cea77d6fab",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, true / 18 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, true / 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "5da34b88-fb35-409f-b923-93a579d57a2a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, null / 18 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, null / 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "0de0a35e-96d4-4339-b859-9f5b3dbad2d8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, undefined / 18 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, undefined / 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "2a72d645-3865-4756-be0b-868355921cfe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing, 18 / [object Object] equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing, 18 / [object Object] equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "cb32b837-4d28-4fa4-a0e5-2a48ccf8dc1c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for dividing,  / 18 equals TypeError",
                  "fullTitle": "Calculator Test #divide() Should result an Error if non-number arguments are provided for dividing,  / 18 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.divide(...input.input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:371:65)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "48c77189-be8a-4e07-a2dd-5cde1f225879",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea3209a8-83d1-44f9-ae42-421ba18d96d8",
                "91f3600d-1130-4f17-89b4-bb050d8ceca2",
                "fab7d725-0aa1-43fe-93dc-4f3a75e602b3",
                "6396f7f6-281a-4651-87c5-0dbbfea4f80f",
                "72839f91-5641-423b-abbb-6fab726f509b",
                "f1fe2155-271b-41f8-8d84-30d9536a59f8",
                "93292096-31a7-4333-b9d9-e150419b3811",
                "7d1c8a12-4163-4139-acbe-2d1ca5378286",
                "9981e064-65d8-4d7d-9488-7e6654e5379e",
                "f4cb98ec-8762-48bf-8841-3128de80d26e",
                "76b72378-0cc4-4fd8-a678-b1ad99165498",
                "dd87c7c4-871a-43be-a9a7-3657f7ea9499",
                "83d8c1d3-8493-46e4-8928-f692f6a4abf9",
                "de01636a-c347-4254-beeb-ccd3dcc865fd",
                "139cef55-a8f4-4810-a734-6723872aa672",
                "20d41ec1-6dff-432a-b4d1-526dd3d710bc",
                "7640da5e-5cfc-4a4c-919c-7784276f0091",
                "7105a571-5275-462e-816a-b45da67956ad",
                "32990ac0-6276-42be-a911-439ac560bdb6",
                "a53fa9b1-ee53-49e5-bb6c-543497000ee0",
                "ab887ce3-616a-44ea-aebc-e4608ee3c043",
                "5093bd97-874c-47d5-9c89-512d42cd329c",
                "b072f4f8-fac5-41a7-b638-1e18c7b260fa",
                "1270680e-0746-4814-bbd8-37d122fc7b6d",
                "ed6fe22c-4898-4cff-b815-30774779e056",
                "c0846f7d-f722-4be3-8431-c67c8604d7df",
                "10046e61-3623-44d7-92cc-2c42f3c54524",
                "93b075e6-35b8-49e5-85e5-1b233e5dd194"
              ],
              "failures": [
                "e52b52e9-0080-4d9a-88ff-2daf8e185c75",
                "e4874917-1ba1-43fa-af74-d1d707a6f1db",
                "ce84c03c-1383-4b67-b659-a182c49b5136",
                "5d058bd6-396c-47cc-befe-90e2dd3ff6df",
                "47529524-fa74-42bb-a5f2-979624ad8e78",
                "f64fb2fd-d3e1-47b6-ab93-653a73f3e7e7",
                "88d38f74-d2d9-4b08-8662-80953dd524c1",
                "3cb210b0-5b28-4419-94f5-4db2f00c657a",
                "4db31071-d5fe-4c12-ad60-29cd5830ff36",
                "da36085f-5e55-40cf-8137-8451594a2266",
                "2a9a5f32-0667-47b9-bac5-65cea77d6fab",
                "5da34b88-fb35-409f-b923-93a579d57a2a",
                "0de0a35e-96d4-4339-b859-9f5b3dbad2d8",
                "2a72d645-3865-4756-be0b-868355921cfe",
                "cb32b837-4d28-4fa4-a0e5-2a48ccf8dc1c",
                "48c77189-be8a-4e07-a2dd-5cde1f225879"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "4d8de2e0-9624-4f08-aeb7-a61e7a8af9d4",
              "title": "#exponentiation()",
              "fullFile": "C:\\JS\\HomeWorks_NK\\Lesson_15_Calculator\\test\\test.spec.js",
              "file": "\\test\\test.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should return the square of integer number: (5)**2 equals 25",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (5)**2 equals 25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "25ccc4e9-dc56-497f-9728-9f5f04dec4d3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of integer number: (-5)**2 equals 25",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (-5)**2 equals 25",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "055ceaf9-47f2-4ef5-aa85-1b7c2063dc9f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of integer number: (-9007199254740991)**2 equals 8.112963841460666e+31",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (-9007199254740991)**2 equals 8.112963841460666e+31",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "974c085d-e137-4740-be78-fdf023ad53a4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of integer number: (9007199254740991)**2 equals 8.112963841460666e+31",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (9007199254740991)**2 equals 8.112963841460666e+31",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "dddac097-0c97-49b1-83f9-4afea158c3c2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of integer number: (9007199254740991)**2 equals 8.112963841460666e+31",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (9007199254740991)**2 equals 8.112963841460666e+31",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "26fa51ab-da06-44da-8b86-163eae420492",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of integer number: (-9007199254740991)**2 equals 8.112963841460666e+31",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of integer number: (-9007199254740991)**2 equals 8.112963841460666e+31",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.equal(expected);",
                  "err": {},
                  "uuid": "cee85eac-4bba-4ff4-a217-0f1cd15b360c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (1.2)**2 equals 1.44",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (1.2)**2 equals 1.44",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "862a365b-fbd4-4f61-b9f2-33213f0de4c5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (-1.2)**2 equals 1.44",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (-1.2)**2 equals 1.44",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "dafc7ca0-0b5b-4530-bd5c-1094c62c1b18",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (5e-324)**2 equals 0",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (5e-324)**2 equals 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "9a9d6cb9-9a76-48c4-ba9e-9bcdecddb9b7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (-5e-324)**2 equals 0",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (-5e-324)**2 equals 0",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {},
                  "uuid": "1871668d-981f-4e6c-95e9-346ef20c8b89",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (1.7976931348623157e+308)**2 equals Infinity",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (1.7976931348623157e+308)**2 equals Infinity",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {
                    "message": "AssertionError: expected Infinity to be close to Infinity +/- 0.00001",
                    "estack": "AssertionError: expected Infinity to be close to Infinity +/- 0.00001\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:403:56)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "9dd5165c-3edc-45f7-9742-30baf7efc4fb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return the square of fractional number: (-1.7976931348623157e+308)**2 equals Infinity",
                  "fullTitle": "Calculator Test #exponentiation() Should return the square of fractional number: (-1.7976931348623157e+308)**2 equals Infinity",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(input)).to.be.closeTo(expected, 0.00001);",
                  "err": {
                    "message": "AssertionError: expected Infinity to be close to Infinity +/- 0.00001",
                    "estack": "AssertionError: expected Infinity to be close to Infinity +/- 0.00001\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:403:56)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "b8e1fb31-41c7-49a4-85a3-86ff3f79b893",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 0 when the exponent is 0 ",
                  "fullTitle": "Calculator Test #exponentiation() Should return 0 when the exponent is 0 ",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(0)).to.equal(0);",
                  "err": {},
                  "uuid": "db10e177-03c5-49ff-b41a-396d975a465a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return 1 when the exponent is 1 ",
                  "fullTitle": "Calculator Test #exponentiation() Should return 1 when the exponent is 1 ",
                  "timedOut": null,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(calculator.exponentiation(1)).to.equal(1);",
                  "err": {},
                  "uuid": "15cd7ec5-4fd7-4db1-adab-9f4b6a0768dc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, 2**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, 2**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "40dbaace-6de5-45b5-bdbf-0274d8346b57",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, 2**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, 2**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "ffcb4525-164a-4c2a-9a3a-07f903ebdd6d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, a**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, a**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "f53e763f-2fa3-4580-a106-32d6682a33d3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, true**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, true**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "c5028d49-3907-41db-879d-fb8e3d63d157",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, null**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, null**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "6fe12c28-a850-49de-aabb-64a62f126d12",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, undefined**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, undefined**2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "7897ed18-feac-4b79-aebc-f4eb2b2f3eb9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, 18**2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, 18**2 equals TypeError",
                  "timedOut": null,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "73885d97-d946-435b-921f-0bf0eb04dbd1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should result an Error if non-number arguments are provided for exponentiation, **2 equals TypeError",
                  "fullTitle": "Calculator Test #exponentiation() Should result an Error if non-number arguments are provided for exponentiation, **2 equals TypeError",
                  "timedOut": null,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Тесты падают, так как в исходном коде нет валидации типов данных аргументов\nexpect(() => calculator.exponentiation(input)).to.throw(TypeError);",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///C:/JS/HomeWorks_NK/Lesson_15_Calculator/test/test.spec.js:419:64)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "2ad5f19c-3b52-4fda-90fe-efc1ca352499",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25ccc4e9-dc56-497f-9728-9f5f04dec4d3",
                "055ceaf9-47f2-4ef5-aa85-1b7c2063dc9f",
                "974c085d-e137-4740-be78-fdf023ad53a4",
                "dddac097-0c97-49b1-83f9-4afea158c3c2",
                "26fa51ab-da06-44da-8b86-163eae420492",
                "cee85eac-4bba-4ff4-a217-0f1cd15b360c",
                "862a365b-fbd4-4f61-b9f2-33213f0de4c5",
                "dafc7ca0-0b5b-4530-bd5c-1094c62c1b18",
                "9a9d6cb9-9a76-48c4-ba9e-9bcdecddb9b7",
                "1871668d-981f-4e6c-95e9-346ef20c8b89",
                "db10e177-03c5-49ff-b41a-396d975a465a",
                "15cd7ec5-4fd7-4db1-adab-9f4b6a0768dc"
              ],
              "failures": [
                "9dd5165c-3edc-45f7-9742-30baf7efc4fb",
                "b8e1fb31-41c7-49a4-85a3-86ff3f79b893",
                "40dbaace-6de5-45b5-bdbf-0274d8346b57",
                "ffcb4525-164a-4c2a-9a3a-07f903ebdd6d",
                "f53e763f-2fa3-4580-a106-32d6682a33d3",
                "c5028d49-3907-41db-879d-fb8e3d63d157",
                "6fe12c28-a850-49de-aabb-64a62f126d12",
                "7897ed18-feac-4b79-aebc-f4eb2b2f3eb9",
                "73885d97-d946-435b-921f-0bf0eb04dbd1",
                "2ad5f19c-3b52-4fda-90fe-efc1ca352499"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}